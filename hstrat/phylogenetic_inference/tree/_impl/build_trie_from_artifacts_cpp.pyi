import typing
from typing import overload

def build_trie_from_artifacts_sync(
    population: list[typing.Tuple[list[int], list[int]]],
    taxon_labels: list[str],
) -> TrieInnerNode_C: ...

class TrieInnerNode_C:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, rank: int, differentia: int) -> None: ...
    def __eq__(self, value: object, /) -> bool: ...
    @property
    def rank(self) -> int: ...
    @property
    def differentia(self) -> int: ...
    @property
    def inner_children(self) -> list[TrieInnerNode_C]: ...
    @property
    def outer_children(self) -> list[TrieInnerNode_C]: ...
    def InsertTaxon(
        self, ranks: list[int], differentiae: list[int]
    ) -> None: ...

class TrieLeafNode_C:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, taxon_label: str) -> None: ...
    def __eq__(self, value: object, /) -> bool: ...
    def __gt__(self, value: object, /) -> bool: ...
    @property
    def taxon_label(self) -> str: ...
