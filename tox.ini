[tox]
envlist = flake8, mypy, py310, py311, py312, py313
isolated_build = True

[coverage:report]
exclude_lines =
  # Have to re-enable the standard pragma
  pragma: no cover

  # Don't complain about missing debug-only code:
  def __repr__
  if self\.debug

  # Don't complain if tests don't hit defensive assertion code:
  raise AssertionError
  raise NotImplementedError

  # Don't complain if non-runnable code isn't run:
  if 0:
  if __name__ == .__main__.:

[coverage:run]
source =
  hstrat

[flake8]
extend-ignore = D203, E501, F403, W503

[pydocstyle]
convention = numpy
add_ignore = D100, D101, D103, D104, D105, D205, D400

[gh-actions]
python =
    3.10: py310
    3.11: py311
    3.12: py312
    3.13: py313

[testenv:flake8]
basepython = python
deps = flake8
commands = flake8 hstrat tests

[testenv:mypy]
deps =
    -r{toxinidir}/requirements-dev/py310/requirements-testing.txt

[testenv:py310]
deps =
    -r{toxinidir}/requirements-dev/py310/requirements-testing.txt

[testenv:py311]
deps =
    -r{toxinidir}/requirements-dev/py311/requirements-testing.txt

[testenv:py312]
deps =
    -r{toxinidir}/requirements-dev/py312/requirements-testing.txt

[testenv:semiheavy]
python =
  3.10
deps =
  -r{toxinidir}/requirements-dev/py310/requirements-testing.txt
commands =
    pytest -n auto -m '(heavy_2a or heavy_2b or heavy_3a or heavy_3b or heavy_3c) and not (heavy_2a and heavy_2b) and not (heavy_3a and heavy_3b and heavy_3c)' {toxinidir}/tests/test_hstrat

[testenv]
setenv =
    PYTHONPATH = {toxinidir}
commands =
;   importlib mode prevents local source files from interfering with tox test
    pytest --import-mode=importlib -n auto {toxinidir}/tests/test_hstrat/{env:HSTRAT_TESTS_SUBDIVISION}
passenv =
    HSTRAT_TESTS_SUBDIVISION
