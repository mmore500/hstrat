name: hstrat

on:
  - push
  - pull_request

jobs:
  test-py:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9]

    steps:
    - uses: actions/checkout@v1
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tox tox-gh-actions
    - name: Test with tox
      run: tox

  test-py-native:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version: [3.8, 3.9]
        cxx:
          - g++-10
          # - clang++-14 <- need to adjust -fcoroutines flag in Mako blocks
    steps:
    - run: |
        sudo apt update
        sudo apt install -y g++-10 clang-14
    - uses: actions/checkout@v1
      with:
        submodules: recursive
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tox tox-gh-actions
        python -m pip install -r requirements_dev.txt
    - name: Run tests
      run: tox
      env:
        CXX: ${{ matrix.cxx }}
        HSTRAT_CPPIMPORT_OPT_IN: 1
        HSTRAT_RERAISE_IMPORT_NATIVE_EXCEPTION: 1

  test-cpp:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        cxx:
          - g++-10
          # - clang++-14 <- need to adjust -fcoroutines flag in Makefiles

    steps:
    - run: |
        sudo apt update
        sudo apt install -y g++-10 clang-14
    - uses: actions/checkout@v1
      with:
        submodules: recursive
    - name: Set up Python 3.7
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements_dev.txt
    - name: Run tests
      run: make -C test_include
      env:
        CXX:   ${{ matrix.cxx }}

  coverage:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements_dev.txt
    - name: Log coverage configuration
      run: coverage debug sys
    - name: Run tests with coverage report
      run: coverage run -m pytest test_hstrat
    - uses: codecov/codecov-action@v3
      with:
        flags: tests # optional
        fail_ci_if_error: true # optional (default = false)
        verbose: true # optional (default = false)

  tidy:
    runs-on: ubuntu-latest
    steps:
    - name: Install apt dependencies
      run: sudo apt-get install -y rename
    - uses: actions/checkout@v1
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Test isort tidyness
      uses: jamescurtin/isort-action@master
      with:
          requirementsFiles: "requirements_dev.txt"
    - name: Test Black tidyness
      uses: psf/black@stable
    - uses: editorconfig-checker/action-editorconfig-checker@main
    - name: Test editorconfig tidyness
      run: editorconfig-checker
    - name: Test tidy/ tidyness
      run: ./tidy/test_tidy.sh

  deploy:
    needs: [coverage, test-py, test-py-native, test-cpp, tidy]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine
    - run: python setup.py sdist bdist_wheel
    - name: Publish package
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
